cmake_minimum_required(VERSION 3.5)
project(
        fpg
        VERSION 1.0.0
        LANGUAGES CXX)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
        ${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules)

include(CTest)
include(FeatureSummary)
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

include(LibraryUtils)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

option(ENABLE_DOCS "Enable build of autogenerated documentation" OFF)

option(ENABLE_CPP_PARSER "Enable build of autogenerated parser for C++ (Flex,Bison,C++stl)" ON)
option(ENABLE_JAVA_PARSER "Enable build of autogenerated parser for Java (ANTLR)" OFF)
option(ENABLE_CSHARP_PARSER "Enable build of autogenerated parser for CSharp" OFF)
option(ENABLE_PYTHON_PARSER "Enable build of autogenerated parser for Python (Pygments)" OFF)

if(EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
    conan_basic_setup()
    conan_define_targets()
else()
    message(WARNING "The file conanbuildinfo.cmake doesn't exist, you have to run conan install first")
endif()

# grammar generator
find_package(BNFC REQUIRED)

# parser targets for C++
if(ENABLE_CPP_PARSER)
        include(cpp.cmake)
endif()

#parser for csharp 
if(ENABLE_CSHARP_PARSER)
        include(csharp.cmake)
endif()

if(ENABLE_PYTHON_PARSER)
        include(python.cmake)
endif()

# parser tagets for Java
if(ENABLE_JAVA_PARSER)
        find_package(Java COMPONENTS Development Runtime REQUIRED)
        find_package(JNI REQUIRED)
        include(UseJava)
        include(Maven)

        include(java.cmake)
endif()

if(ENABLE_DOCS)
        set(DOCS_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/docs)
        add_custom_target(makeDocsDirectory ALL COMMAND ${CMAKE_COMMAND} -E make_directory ${DOCS_OUTPUT_DIRECTORY})

        include(docs/GrammarDocs.cmake)
endif()

include("CPack.cmake")
